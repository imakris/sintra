name: Stress Test - Windows
run-name: Stress Test - ${{ github.event.workflow_run.display_title }}

on:
  workflow_run:
    workflows: ["Build - Windows"]
    types:
      - completed

permissions:
  actions: read
  contents: read

jobs:
  stress-test:
    name: Stress Test
    runs-on: windows-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
          fetch-depth: 0

      - name: Determine diff base
        id: diff-base
        shell: bash
        env:
          HEAD_SHA: ${{ github.event.workflow_run.head_sha }}
          PR_BASE_SHA: ${{ github.event.workflow_run.pull_requests[0].base.sha || '' }}
        run: |
          set -euo pipefail
          if [ -n "$PR_BASE_SHA" ]; then
            base_commit="$PR_BASE_SHA"
          elif git rev-parse "${HEAD_SHA}^" >/dev/null 2>&1; then
            base_commit="$(git rev-parse "${HEAD_SHA}^")"
          else
            base_commit="$HEAD_SHA"
          fi
          echo "base=$base_commit" >> "$GITHUB_OUTPUT"

      - name: Detect changed areas
        id: changed
        uses: dorny/paths-filter@v3
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
          base: ${{ steps.diff-base.outputs.base }}
          filters: |
            core:
              - 'src/**'
              - 'include/**'
              - 'cmake/**'
              - 'CMakeLists.txt'
              - 'CMakePresets.json'
              - 'third_party/**'
            tests:
              - 'tests/**'
            examples:
              - 'example/**'
            workflows:
              - '.github/workflows/**'

      - name: Compute CMake flags
        id: flags
        shell: bash
        run: |
          CT="-DSINTRA_BUILD_TESTS=OFF -DSINTRA_TEST_MATRIX=quick"
          CE="-DSINTRA_BUILD_EXAMPLES=OFF"
          CS="-DSINTRA_RELEASE_WITH_DEBUG_SYMBOLS=ON"
          if [ "${{ steps.changed.outputs.tests }}" = "true" ] || [ "${{ steps.changed.outputs.core }}" = "true" ] || [ "${{ steps.changed.outputs.workflows }}" = "true" ]; then
            CT="-DSINTRA_BUILD_TESTS=ON -DSINTRA_TEST_MATRIX=quick"
          fi
          if [ "${{ steps.changed.outputs.examples }}" = "true" ]; then
            CE="-DSINTRA_BUILD_EXAMPLES=ON"
          fi
          echo "CMAKE_FLAGS=$CT $CE $CS" >> "$GITHUB_OUTPUT"

      - name: Ensure Windows debugging tools
        shell: pwsh
        run: |
          function Get-DebugDirectories {
            return @(
              "${env:ProgramFiles(x86)}\Windows Kits\10\Debuggers\x64",
              "${env:ProgramFiles(x86)}\Windows Kits\10\Debuggers\x86"
            ) | Where-Object { $_ -and (Test-Path $_) }
          }

          $debugDirs = Get-DebugDirectories
          if (-not $debugDirs) {
            $packages = @(
              'windows-sdk-10-version-10.0.26100.1742',
              'windows-sdk-10-version-10.0.26100.1',
              'windows-sdk-10-version-10.0.22621.755'
            )

            $installed = $false
            foreach ($package in $packages) {
              Write-Host "Attempting to install $package via Chocolatey"
              choco install $package --no-progress -y --package-parameters "'ADDLOCAL=DebuggingTools'"
              if ($LASTEXITCODE -in 0, 3010, 1641) {
                if ($LASTEXITCODE -ne 0) {
                  Write-Host "Chocolatey reported reboot-required exit code $LASTEXITCODE for $package; treating as success"
                  $global:LASTEXITCODE = 0
                }
                $installed = $true
                break
              }
              Write-Warning "Failed to install $package (exit code $LASTEXITCODE)."
              $global:LASTEXITCODE = 0
            }

            if (-not $installed) {
              Write-Warning "Windows debugging tools could not be installed. Packages tried: $($packages -join ', ')"
            }

            $debugDirs = Get-DebugDirectories
          }

          if (-not $debugDirs) {
            Write-Warning 'Windows debugging tools not found. Crash dump collection will be skipped during stress tests.'
          } else {
            foreach ($dir in $debugDirs) {
              Add-Content -Path $env:GITHUB_PATH -Value $dir
            }
          }

      - name: Verify Windows debuggers
        shell: pwsh
        run: |
          $candidates = @('cdb', 'ntsd', 'windbg')
          $found = @()
          foreach ($candidate in $candidates) {
            $command = Get-Command $candidate -ErrorAction SilentlyContinue
            if ($command) {
              $paths = @($command | ForEach-Object {
                  if ($_.Source) { $_.Source } else { $_.Definition }
                }) | Where-Object { $_ }
              if (-not $paths) {
                $paths = @('<unknown path>')
              }
              Write-Host "$candidate -> $($paths -join ', ')"
              $found += $candidate
            } else {
              Write-Warning "Unable to locate $candidate"
            }
            $global:LASTEXITCODE = 0
          }
          if (-not $found) {
            Write-Warning "No Windows debugger discovered. Checked: $($candidates -join ', ')"
            Add-Content -Path $env:GITHUB_ENV -Value 'SINTRA_WINDOWS_DEBUGGER_AVAILABLE=false'
          } else {
            Add-Content -Path $env:GITHUB_ENV -Value 'SINTRA_WINDOWS_DEBUGGER_AVAILABLE=true'
          }

      - name: Download build artifacts
        id: download-artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-build-${{ github.event.workflow_run.head_sha }}
          path: build/
          github-token: ${{ github.token }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Verify build artifacts were downloaded
        shell: pwsh
        run: |
          if (-not (Test-Path 'build')) {
            Write-Error 'Expected build artifact directory "build" is missing.'
            exit 1
          }

          $entries = Get-ChildItem -Path 'build' -Force -ErrorAction Stop
          if (-not $entries) {
            Write-Error 'Downloaded build artifact directory "build" is empty.'
            exit 1
          }

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Run stress tests with run_tests.py
        if: steps.changed.outputs.tests == 'true' || steps.changed.outputs.core == 'true' || steps.changed.outputs.workflows == 'true'
        shell: bash
        run: |
          cd tests
          python run_tests.py --repetitions 10 --timeout 30 --build-dir ../build --config Release
