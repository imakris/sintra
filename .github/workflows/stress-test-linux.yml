name: Stress Test - Linux (reusable)

on:
  workflow_call:
    inputs:
      build_run_id:
        description: "Actions run id of the build that produced artifacts"
        required: true
        type: string
      head_sha:
        description: "Commit SHA to test (head of PR or push)"
        required: true
        type: string
      base_sha:
        description: "Base commit SHA for diff detection (PR base or push commit)"
        required: false
        type: string
      branch:
        description: "Branch name (PR head ref or push ref)"
        required: false
        type: string
      pr_number:
        description: "PR number if this came from a PR"
        required: false
        type: string
    secrets:
      repository-token:
        description: "GitHub token forwarded from the caller workflow"
        required: true
      gist-secret:
        description: "Gist token for badge updates"
        required: false

permissions:
  actions: read
  contents: read
  statuses: write

concurrency:
  group: stress-${{ inputs.head_sha }}-linux
  cancel-in-progress: false

jobs:
  stress-test:
    name: Stress Test
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.repository-token }}

    steps:
      - name: Set context env
        shell: bash
        run: |
          echo "RUN_ID=${{ inputs.build_run_id }}" >> "$GITHUB_ENV"
          echo "HEAD_SHA=${{ inputs.head_sha }}" >> "$GITHUB_ENV"
          echo "BASE_SHA=${{ inputs.base_sha || '' }}" >> "$GITHUB_ENV"
          echo "HEAD_BRANCH=${{ inputs.branch || '' }}" >> "$GITHUB_ENV"
          echo "PR_NUMBER=${{ inputs.pr_number || '' }}" >> "$GITHUB_ENV"

      - name: Context
        if: always()
        shell: bash
        run: |
          {
            echo "### Source";
            if [ -n "${PR_NUMBER}" ]; then
              echo "- PR: #${PR_NUMBER}";
            else
              echo "- PR: —";
            fi
            if [ -n "${HEAD_BRANCH}" ]; then
              echo "- Branch: ${HEAD_BRANCH}";
            else
              echo "- Branch: —";
            fi
            echo "- Commit: ${HEAD_SHA}";
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.HEAD_SHA }}
          fetch-depth: 0

      - name: Determine diff base
        id: diff-base
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${BASE_SHA}" ]; then
            base_commit="$BASE_SHA"
          elif git rev-parse "${HEAD_SHA}^" >/dev/null 2>&1; then
            base_commit="$(git rev-parse "${HEAD_SHA}^")"
          else
            base_commit="$HEAD_SHA"
          fi
          echo "base=$base_commit" >> "$GITHUB_OUTPUT"

      - name: Detect changed areas
        id: changed
        uses: dorny/paths-filter@v3
        with:
          ref: ${{ env.HEAD_SHA }}
          base: ${{ steps.diff-base.outputs.base }}
          filters: |
            core:
              - 'src/**'
              - 'include/**'
              - 'cmake/**'
              - 'CMakeLists.txt'
              - 'CMakePresets.json'
              - 'third_party/**'
            tests:
              - 'tests/**'
            examples:
              - 'example/**'
            workflows:
              - '.github/workflows/**'

      - name: Restore cached gdb toolchain
        id: cache-gdb
        uses: actions/cache@v4
        with:
          path: ~/.cache/sintra-gdb
          key: linux-gdb-${{ runner.os }}-v2024-04-03

      - name: Bootstrap gdb toolchain cache
        if: steps.cache-gdb.outputs.cache-hit != 'true'
        run: |
          set -euxo pipefail
          cache_root="$HOME/.cache/sintra-gdb"
          rm -rf "$cache_root"
          mkdir -p "$cache_root/debs" "$cache_root/root"
          sudo rm -f /var/cache/apt/archives/*.deb
          sudo apt-get update
          sudo apt-get install -y --download-only gdb
          sudo cp /var/cache/apt/archives/*.deb "$cache_root/debs/"
          sudo chown -R "$(id -u)":"$(id -g)" "$cache_root"
          shopt -s nullglob
          for deb in "$cache_root"/debs/*.deb; do
            dpkg-deb -x "$deb" "$cache_root/root"
          done
          sudo apt-get clean

      - name: Activate cached gdb toolchain
        run: |
          set -euxo pipefail
          cache_prefix="$HOME/.cache/sintra-gdb/root"
          echo "$cache_prefix/usr/bin" >> "$GITHUB_PATH"
          lib_paths=(
            "$cache_prefix/usr/lib/x86_64-linux-gnu"
            "$cache_prefix/usr/lib"
            "$cache_prefix/lib/x86_64-linux-gnu"
            "$cache_prefix/lib"
          )
          ld_path="$(IFS=:; echo "${lib_paths[*]}")"
          if [ -n "${LD_LIBRARY_PATH:-}" ]; then
            ld_path="$ld_path:$LD_LIBRARY_PATH"
          fi
          echo "LD_LIBRARY_PATH=$ld_path" >> "$GITHUB_ENV"

      - name: Allow ptrace attachments for crash debugging
        run: |
          sudo sysctl -w kernel.yama.ptrace_scope=0

      - name: Verify ptrace scope
        run: sysctl kernel.yama.ptrace_scope

      - name: Verify gdb
        run: gdb --version

      - name: Download build artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          name: linux-build-${{ env.HEAD_SHA }}
          path: build/
          github-token: ${{ secrets.repository-token }}
          run-id: ${{ env.RUN_ID }}
      - name: Verify artifacts present
        run: |
          if [ ! -d build ]; then
            echo "Expected build artifacts were not downloaded" >&2
            exit 1
          fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Make test executables executable
        shell: bash
        run: |
          if [ -d build/tests ]; then
            find build/tests -type f -exec chmod +x {} +
          fi

      - name: Run stress tests with run_tests.py
        if: steps.changed.outputs.tests == 'true' || steps.changed.outputs.core == 'true' || steps.changed.outputs.workflows == 'true'
        shell: bash
        run: |
          cd tests
          python run_tests.py --repetitions 10 --timeout 30 --build-dir ../build --config Release

      - name: Mark status success
        if: success()
        uses: actions/github-script@v8
        with:
          script: |
            const {owner, repo} = context.repo;
            const sha = process.env.HEAD_SHA;
            const branch = process.env.HEAD_BRANCH;
            const prNumber = process.env.PR_NUMBER;
            const statusContext = 'Stress Test';
            await github.rest.repos.createCommitStatus({
              owner, repo, sha,
              state: 'success',
              context: statusContext,
              target_url: `${context.serverUrl}/${owner}/${repo}/actions/runs/${process.env.GITHUB_RUN_ID}`,
              description: `Stress Test passed${branch ? ` on ${branch}` : ''}${prNumber ? ` (PR #${prNumber})` : ''}`
            });

      - name: Mark status failure
        if: failure()
        uses: actions/github-script@v8
        with:
          script: |
            const {owner, repo} = context.repo;
            const sha = process.env.HEAD_SHA;
            const branch = process.env.HEAD_BRANCH;
            const prNumber = process.env.PR_NUMBER;
            const statusContext = 'Stress Test';
            await github.rest.repos.createCommitStatus({
              owner, repo, sha,
              state: 'failure',
              context: statusContext,
              target_url: `${context.serverUrl}/${owner}/${repo}/actions/runs/${process.env.GITHUB_RUN_ID}`,
              description: `Stress Test failed${branch ? ` on ${branch}` : ''}${prNumber ? ` (PR #${prNumber})` : ''}`
            });

      - name: Update tests badge
        if: always() && inputs.branch == 'master'
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.gist-secret }}
          gistID: 38c12e638eddbbfad6962730f6b10d20
          filename: sintra-linux-tests.json
          label: Tests
          message: ${{ job.status }}
          color: ${{ job.status == 'success' && 'green' || 'red' }}
