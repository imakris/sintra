name: Stress Test - Linux
run-name: >
  Stress · Linux ·
  ${{ (github.event_name == 'pull_request' && github.event.pull_request.head.ref) || (github.event.workflow_run && github.event.workflow_run.head_branch) || github.ref_name }}
  ${{ (github.event_name == 'pull_request' && format('· PR #{0}', github.event.pull_request.number)) || (github.event.workflow_run && github.event.workflow_run.pull_requests && github.event.workflow_run.pull_requests[0] && format('· PR #{0}', github.event.workflow_run.pull_requests[0].number)) || '' }}

on:
  workflow_run:
    workflows: ["Build - Linux"]
    types:
      - completed

permissions:
  actions: read
  contents: read
  statuses: write

concurrency:
  group: stress-${{ (github.event.workflow_run && github.event.workflow_run.head_sha) || (github.event.pull_request && github.event.pull_request.head.sha) || github.sha }}-linux
  cancel-in-progress: false

jobs:
  stress-test:
    name: Stress Test - Linux
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'workflow_run' &&
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.event != 'pull_request') ||
      github.event_name == 'pull_request' }}

    steps:
      - name: Mark stress tests as pending on PR commit
        uses: actions/github-script@v8
        with:
          script: |
            const {owner, repo} = context.repo;
            const eventName = context.eventName;
            let sha;
            let branch;
            let prNumber;

            if (eventName === 'pull_request') {
              const pr = context.payload.pull_request;
              sha = pr.head.sha;
              branch = pr.head.ref;
              prNumber = pr.number;
            } else {
              const run = context.payload.workflow_run;
              sha = run.head_sha;
              branch = run.head_branch;
              const pr = run.pull_requests && run.pull_requests[0];
              if (pr) {
                prNumber = pr.number;
              }
            }

            await github.rest.repos.createCommitStatus({
              owner, repo, sha,
              state: 'pending',
              context: `Stress tests / ${process.platform}`,
              target_url: `${context.serverUrl}/${owner}/${repo}/actions/runs/${process.env.GITHUB_RUN_ID}`,
              description: `Starting stress tests for ${branch || sha.substring(0,7)}${prNumber ? ` (PR #${prNumber})` : ''}`
            });

      - name: Wait for build run to complete (PR only)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v8
        with:
          script: |
            const {owner, repo} = context.repo;
            const headSha = context.payload.pull_request.head.sha;

            const wf = await github.rest.actions.getWorkflow({
              owner, repo, workflow_id: 'build-linux.yml'
            });

            const deadline = Date.now() + 60 * 60 * 1000;
            while (true) {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner, repo, workflow_id: wf.data.id,
                head_sha: headSha, per_page: 1
              });
              const run = runs.data.workflow_runs[0];
              core.info(run ? `Build status: ${run.status}/${run.conclusion}` : 'No build run yet');

              if (run && run.status === 'completed') {
                if (run.conclusion !== 'success') {
                  core.setFailed(`Build is ${run.conclusion}, aborting stress tests`);
                }
                core.exportVariable('SRC_BUILD_RUN_ID', run.id.toString());
                break;
              }
              if (Date.now() > deadline) {
                core.setFailed('Timed out waiting for build run to complete');
                break;
              }
              await new Promise(r => setTimeout(r, 30000));
            }

      - name: Set artifact lookup vars
        id: vars
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "RUN_ID=${SRC_BUILD_RUN_ID}" >> "$GITHUB_ENV"
            echo "HEAD_SHA=${{ github.event.pull_request.head.sha }}" >> "$GITHUB_ENV"
            echo "HEAD_BRANCH=${{ github.event.pull_request.head.ref }}" >> "$GITHUB_ENV"
            echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> "$GITHUB_ENV"
            echo "PR_URL=${{ github.event.pull_request.html_url }}" >> "$GITHUB_ENV"
            echo "PR_BASE_SHA=${{ github.event.pull_request.base.sha }}" >> "$GITHUB_ENV"
          else
            echo "RUN_ID=${{ github.event.workflow_run.id }}" >> "$GITHUB_ENV"
            echo "HEAD_SHA=${{ github.event.workflow_run.head_sha }}" >> "$GITHUB_ENV"
            echo "HEAD_BRANCH=${{ github.event.workflow_run.head_branch }}" >> "$GITHUB_ENV"
            echo "PR_NUMBER=${{ github.event.workflow_run.pull_requests && github.event.workflow_run.pull_requests[0] && github.event.workflow_run.pull_requests[0].number || '' }}" >> "$GITHUB_ENV"
            echo "PR_URL=${{ github.event.workflow_run.pull_requests && github.event.workflow_run.pull_requests[0] && github.event.workflow_run.pull_requests[0].html_url || '' }}" >> "$GITHUB_ENV"
            echo "PR_BASE_SHA=${{ github.event.workflow_run.pull_requests && github.event.workflow_run.pull_requests[0] && github.event.workflow_run.pull_requests[0].base.sha || '' }}" >> "$GITHUB_ENV"
          fi

      - name: Context
        if: always()
        shell: bash
        run: |
          {
            echo "### Source";
            if [ -n "${PR_NUMBER}" ]; then
              echo "- PR: [#${PR_NUMBER}](${PR_URL})";
            else
              echo "- PR: —";
            fi
            if [ -n "${HEAD_BRANCH}" ]; then
              echo "- Branch: [${HEAD_BRANCH}](https://github.com/${{ github.repository }}/tree/${HEAD_BRANCH})";
            else
              echo "- Branch: —";
            fi
            echo "- Commit: [${HEAD_SHA}](https://github.com/${{ github.repository }}/commit/${HEAD_SHA})";
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.HEAD_SHA }}
          fetch-depth: 0

      - name: Determine diff base
        id: diff-base
        shell: bash
        env:
          HEAD_SHA: ${{ env.HEAD_SHA }}
          PR_BASE_SHA: ${{ env.PR_BASE_SHA }}
        run: |
          set -euo pipefail
          if [ -n "$PR_BASE_SHA" ]; then
            base_commit="$PR_BASE_SHA"
          elif git rev-parse "${HEAD_SHA}^" >/dev/null 2>&1; then
            base_commit="$(git rev-parse "${HEAD_SHA}^")"
          else
            base_commit="$HEAD_SHA"
          fi
          echo "base=$base_commit" >> "$GITHUB_OUTPUT"

      - name: Detect changed areas
        id: changed
        uses: dorny/paths-filter@v3
        with:
          ref: ${{ env.HEAD_SHA }}
          base: ${{ steps.diff-base.outputs.base }}
          filters: |
            core:
              - 'src/**'
              - 'include/**'
              - 'cmake/**'
              - 'CMakeLists.txt'
              - 'CMakePresets.json'
              - 'third_party/**'
            tests:
              - 'tests/**'
            examples:
              - 'example/**'
            workflows:
              - '.github/workflows/**'

      - name: Compute CMake flags
        id: flags
        shell: bash
        run: |
          CT="-DSINTRA_BUILD_TESTS=OFF -DSINTRA_TEST_MATRIX=quick"
          CE="-DSINTRA_BUILD_EXAMPLES=OFF"
          CS="-DSINTRA_RELEASE_WITH_DEBUG_SYMBOLS=ON"
          if [ "${{ steps.changed.outputs.tests }}" = "true" ] || [ "${{ steps.changed.outputs.core }}" = "true" ] || [ "${{ steps.changed.outputs.workflows }}" = "true" ]; then
            CT="-DSINTRA_BUILD_TESTS=ON -DSINTRA_TEST_MATRIX=quick"
          fi
          if [ "${{ steps.changed.outputs.examples }}" = "true" ]; then
            CE="-DSINTRA_BUILD_EXAMPLES=ON"
          fi
          echo "CMAKE_FLAGS=$CT $CE $CS" >> "$GITHUB_OUTPUT"

      - name: Restore cached gdb toolchain
        id: cache-gdb
        uses: actions/cache@v4
        with:
          path: ~/.cache/sintra-gdb
          key: linux-gdb-${{ runner.os }}-v2024-04-03

      - name: Bootstrap gdb toolchain cache
        if: steps.cache-gdb.outputs.cache-hit != 'true'
        run: |
          set -euxo pipefail
          cache_root="$HOME/.cache/sintra-gdb"
          rm -rf "$cache_root"
          mkdir -p "$cache_root/debs" "$cache_root/root"
          sudo rm -f /var/cache/apt/archives/*.deb
          sudo apt-get update
          sudo apt-get install -y --download-only gdb
          sudo cp /var/cache/apt/archives/*.deb "$cache_root/debs/"
          sudo chown -R "$(id -u)":"$(id -g)" "$cache_root"
          shopt -s nullglob
          for deb in "$cache_root"/debs/*.deb; do
            dpkg-deb -x "$deb" "$cache_root/root"
          done
          sudo apt-get clean

      - name: Activate cached gdb toolchain
        run: |
          set -euxo pipefail
          cache_prefix="$HOME/.cache/sintra-gdb/root"
          echo "$cache_prefix/usr/bin" >> "$GITHUB_PATH"
          lib_paths=(
            "$cache_prefix/usr/lib/x86_64-linux-gnu"
            "$cache_prefix/usr/lib"
            "$cache_prefix/lib/x86_64-linux-gnu"
            "$cache_prefix/lib"
          )
          ld_path="$(IFS=:; echo "${lib_paths[*]}")"
          if [ -n "${LD_LIBRARY_PATH:-}" ]; then
            ld_path="$ld_path:$LD_LIBRARY_PATH"
          fi
          echo "LD_LIBRARY_PATH=$ld_path" >> "$GITHUB_ENV"

      - name: Allow ptrace attachments for crash debugging
        run: |
          sudo sysctl -w kernel.yama.ptrace_scope=0

      - name: Verify ptrace scope
        run: sysctl kernel.yama.ptrace_scope

      - name: Verify gdb
        run: gdb --version

      - name: Download build artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          name: linux-build-${{ env.HEAD_SHA }}
          path: build/
          github-token: ${{ github.token }}
          run-id: ${{ env.RUN_ID }}
          if-no-artifact-found: error

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Make test executables executable
        shell: bash
        run: |
          if [ -d build/tests ]; then
            find build/tests -type f -exec chmod +x {} +
          fi

      - name: Run stress tests with run_tests.py
        if: steps.changed.outputs.tests == 'true' || steps.changed.outputs.core == 'true' || steps.changed.outputs.workflows == 'true'
        shell: bash
        run: |
          cd tests
          python run_tests.py --repetitions 10 --timeout 30 --build-dir ../build --config Release

      - name: Mark status success
        if: success()
        uses: actions/github-script@v8
        with:
          script: |
            const {owner, repo} = context.repo;
            const sha = process.env.HEAD_SHA;
            const branch = process.env.HEAD_BRANCH;
            const prNumber = process.env.PR_NUMBER;
            await github.rest.repos.createCommitStatus({
              owner, repo, sha,
              state: 'success',
              context: `Stress tests / ${process.platform}`,
              target_url: `${context.serverUrl}/${owner}/${repo}/actions/runs/${process.env.GITHUB_RUN_ID}`,
              description: `Stress tests passed${branch ? ` on ${branch}` : ''}${prNumber ? ` (PR #${prNumber})` : ''}`
            });

      - name: Mark status failure
        if: failure()
        uses: actions/github-script@v8
        with:
          script: |
            const {owner, repo} = context.repo;
            const sha = process.env.HEAD_SHA;
            const branch = process.env.HEAD_BRANCH;
            const prNumber = process.env.PR_NUMBER;
            await github.rest.repos.createCommitStatus({
              owner, repo, sha,
              state: 'failure',
              context: `Stress tests / ${process.platform}`,
              target_url: `${context.serverUrl}/${owner}/${repo}/actions/runs/${process.env.GITHUB_RUN_ID}`,
              description: `Stress tests failed${branch ? ` on ${branch}` : ''}${prNumber ? ` (PR #${prNumber})` : ''}`
            });

      - name: Mark status cancelled
        if: cancelled()
        uses: actions/github-script@v8
        with:
          script: |
            const {owner, repo} = context.repo;
            const sha = process.env.HEAD_SHA;
            const branch = process.env.HEAD_BRANCH;
            const prNumber = process.env.PR_NUMBER;
            await github.rest.repos.createCommitStatus({
              owner, repo, sha,
              state: 'error',
              context: `Stress tests / ${process.platform}`,
              target_url: `${context.serverUrl}/${owner}/${repo}/actions/runs/${process.env.GITHUB_RUN_ID}`,
              description: `Stress tests cancelled${branch ? ` on ${branch}` : ''}${prNumber ? ` (PR #${prNumber})` : ''}`
            });
