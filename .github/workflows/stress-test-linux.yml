name: Stress Test - Linux
run-name: Stress Test - ${{ github.event.workflow_run.display_title }}

on:
  workflow_run:
    workflows: ["Build - Linux"]
    types:
      - completed

permissions:
  actions: read
  contents: read

jobs:
  stress-test:
    name: Stress Test
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-build-${{ github.event.workflow_run.head_sha }}
          path: build/
          github-token: ${{ github.token }}
          run-id: ${{ github.event.workflow_run.id }}
          if-no-artifact-found: error

      - name: Detect built tests
        id: payload
        shell: bash
        run: |
          set -euo pipefail

          build_root="build"
          if [ -d "$build_root/build" ] && [ -f "$build_root/build/CMakeCache.txt" ]; then
            build_root="$build_root/build"
          fi

          has_tests=false
          for candidate in \
            "$build_root/tests" \
            "$build_root/tests/Release" \
            "$build_root/tests/Debug"
          do
            if [ -d "$candidate" ] && find "$candidate" -type f -print -quit | grep -q .; then
              has_tests=true
              break
            fi
          done

          echo "build-root=$build_root" >> "$GITHUB_OUTPUT"
          echo "has-tests=$has_tests" >> "$GITHUB_OUTPUT"

      - name: No tests to stress
        if: steps.payload.outputs.has-tests != 'true'
        run: echo "Stress tests skipped because no test executables were present in the build artifact."

      - name: Restore cached gdb toolchain
        if: steps.payload.outputs.has-tests == 'true'
        id: cache-gdb
        uses: actions/cache@v4
        with:
          path: ~/.cache/sintra-gdb
          key: linux-gdb-${{ runner.os }}-v2024-04-03

      - name: Bootstrap gdb toolchain cache
        if: steps.payload.outputs.has-tests == 'true' && steps.cache-gdb.outputs.cache-hit != 'true'
        run: |
          set -euxo pipefail
          cache_root="$HOME/.cache/sintra-gdb"
          rm -rf "$cache_root"
          mkdir -p "$cache_root/debs" "$cache_root/root"
          sudo rm -f /var/cache/apt/archives/*.deb
          sudo apt-get update
          sudo apt-get install -y --download-only gdb
          sudo cp /var/cache/apt/archives/*.deb "$cache_root/debs/"
          sudo chown -R "$(id -u)":"$(id -g)" "$cache_root"
          shopt -s nullglob
          for deb in "$cache_root"/debs/*.deb; do
            dpkg-deb -x "$deb" "$cache_root/root"
          done
          sudo apt-get clean

      - name: Activate cached gdb toolchain
        if: steps.payload.outputs.has-tests == 'true'
        run: |
          set -euxo pipefail
          cache_prefix="$HOME/.cache/sintra-gdb/root"
          echo "$cache_prefix/usr/bin" >> "$GITHUB_PATH"
          lib_paths=(
            "$cache_prefix/usr/lib/x86_64-linux-gnu"
            "$cache_prefix/usr/lib"
            "$cache_prefix/lib/x86_64-linux-gnu"
            "$cache_prefix/lib"
          )
          ld_path="$(IFS=:; echo "${lib_paths[*]}")"
          if [ -n "${LD_LIBRARY_PATH:-}" ]; then
            ld_path="$ld_path:$LD_LIBRARY_PATH"
          fi
          echo "LD_LIBRARY_PATH=$ld_path" >> "$GITHUB_ENV"

      - name: Allow ptrace attachments for crash debugging
        if: steps.payload.outputs.has-tests == 'true'
        run: |
          sudo sysctl -w kernel.yama.ptrace_scope=0

      - name: Verify ptrace scope
        if: steps.payload.outputs.has-tests == 'true'
        run: sysctl kernel.yama.ptrace_scope

      - name: Verify gdb
        if: steps.payload.outputs.has-tests == 'true'
        run: gdb --version

      - name: Setup Python
        if: steps.payload.outputs.has-tests == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Make test executables executable
        if: steps.payload.outputs.has-tests == 'true'
        shell: bash
        run: |
          set -euo pipefail
          build_root="${{ steps.payload.outputs.build-root }}"
          for candidate in \
            "$build_root/tests" \
            "$build_root/tests/Release" \
            "$build_root/tests/Debug"
          do
            if [ -d "$candidate" ]; then
              find "$candidate" -type f -exec chmod +x {} +
            fi
          done

      - name: Run stress tests with run_tests.py
        if: steps.payload.outputs.has-tests == 'true'
        shell: bash
        run: |
          set -euo pipefail
          build_root="${{ steps.payload.outputs.build-root }}"
          if [ ! -d "$build_root/tests" ] && [ ! -d "$build_root/tests/Release" ] && [ ! -d "$build_root/tests/Debug" ]; then
            echo "Stress tests skipped because no test executables were present after download."
            exit 0
          fi
          cd tests
          python run_tests.py --repetitions 10 --timeout 30 --build-dir "../$build_root" --config Release
