name: Build - Linux

on:
  push:
    branches: [ '*' ]
    paths:
      - 'src/**'
      - 'include/**'
      - 'cmake/**'
      - 'CMakeLists.txt'
      - 'CMakePresets.json'
      - 'third_party/**'
      - 'tests/**'
      - 'example/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ '*' ]
    paths:
      - 'src/**'
      - 'include/**'
      - 'cmake/**'
      - 'CMakeLists.txt'
      - 'CMakePresets.json'
      - 'third_party/**'
      - 'tests/**'
      - 'example/**'
      - '.github/workflows/**'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed areas
        id: changed
        uses: dorny/paths-filter@v3
        with:
          filters: |
            core:
              - 'src/**'
              - 'include/**'
              - 'cmake/**'
              - 'CMakeLists.txt'
              - 'CMakePresets.json'
              - 'third_party/**'
            tests:
              - 'tests/**'
            examples:
              - 'example/**'
            workflows:
              - '.github/workflows/**'

      - name: Compute CMake flags
        id: flags
        shell: bash
        run: |
          CT="-DSINTRA_BUILD_TESTS=OFF -DSINTRA_TEST_MATRIX=quick"
          CE="-DSINTRA_BUILD_EXAMPLES=OFF"
          CS="-DSINTRA_RELEASE_WITH_DEBUG_SYMBOLS=ON"
          if [ "${{ steps.changed.outputs.tests }}" = "true" ] || [ "${{ steps.changed.outputs.core }}" = "true" ] || [ "${{ steps.changed.outputs.workflows }}" = "true" ]; then
            CT="-DSINTRA_BUILD_TESTS=ON -DSINTRA_TEST_MATRIX=quick"
          fi
          if [ "${{ steps.changed.outputs.examples }}" = "true" ]; then
            CE="-DSINTRA_BUILD_EXAMPLES=ON"
          fi
          echo "CMAKE_FLAGS=$CT $CE $CS" >> "$GITHUB_OUTPUT"

      - name: Restore cached gdb toolchain
        id: cache-gdb
        uses: actions/cache@v4
        with:
          path: ~/.cache/sintra-gdb
          key: linux-gdb-${{ runner.os }}-v2024-04-03

      - name: Bootstrap gdb toolchain cache
        if: steps.cache-gdb.outputs.cache-hit != 'true'
        run: |
          set -euxo pipefail
          cache_root="$HOME/.cache/sintra-gdb"
          rm -rf "$cache_root"
          mkdir -p "$cache_root/debs" "$cache_root/root"
          sudo rm -f /var/cache/apt/archives/*.deb
          sudo apt-get update
          sudo apt-get install -y --download-only gdb
          sudo cp /var/cache/apt/archives/*.deb "$cache_root/debs/"
          sudo chown -R "$(id -u)":"$(id -g)" "$cache_root"
          shopt -s nullglob
          for deb in "$cache_root"/debs/*.deb; do
            dpkg-deb -x "$deb" "$cache_root/root"
          done
          sudo apt-get clean

      - name: Activate cached gdb toolchain
        run: |
          set -euxo pipefail
          cache_prefix="$HOME/.cache/sintra-gdb/root"
          echo "$cache_prefix/usr/bin" >> "$GITHUB_PATH"
          lib_paths=(
            "$cache_prefix/usr/lib/x86_64-linux-gnu"
            "$cache_prefix/usr/lib"
            "$cache_prefix/lib/x86_64-linux-gnu"
            "$cache_prefix/lib"
          )
          ld_path="$(IFS=:; echo "${lib_paths[*]}")"
          if [ -n "${LD_LIBRARY_PATH:-}" ]; then
            ld_path="$ld_path:$LD_LIBRARY_PATH"
          fi
          echo "LD_LIBRARY_PATH=$ld_path" >> "$GITHUB_ENV"

      - name: Allow ptrace attachments for crash debugging
        run: |
          sudo sysctl -w kernel.yama.ptrace_scope=0

      - name: Verify ptrace scope
        run: sysctl kernel.yama.ptrace_scope

      - name: Verify gdb
        run: gdb --version

      - name: Configure CMake
        run: cmake -B build -S . -DCMAKE_BUILD_TYPE=Release ${{ steps.flags.outputs.CMAKE_FLAGS }}

      - name: Build
        run: cmake --build build --config Release

      - name: Run tests
        if: steps.changed.outputs.tests == 'true' || steps.changed.outputs.core == 'true' || steps.changed.outputs.workflows == 'true'
        run: ctest --test-dir build -C Release --output-on-failure --timeout 60

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-build-${{ github.event.pull_request.head.sha || github.sha }}
          path: build/
          retention-days: 1

  stress-tests:
    name: Stress tests - Linux
    needs: build
    if: ${{ needs.build.result == 'success' }}
    uses: ./.github/workflows/stress-test-linux.yml
    secrets: inherit
    with:
      build_run_id: ${{ github.run_id }}
      head_sha: ${{ github.event.pull_request.head.sha || github.sha }}
      branch: ${{ github.head_ref || github.ref_name }}
      pr_number: ${{ github.event.pull_request.number || '' }}
