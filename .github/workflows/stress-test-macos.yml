name: Stress Test - macOS
run-name: Stress Test - macOS

on:
  workflow_run:
    workflows: ["Build - macOS"]
    types:
      - completed

permissions:
  actions: read
  contents: read

jobs:
  stress-test:
    name: Stress Test - macOS
    runs-on: macos-14
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
          fetch-depth: 0

      - name: Collect run metadata
        id: run-metadata
        shell: bash
        env:
          HEAD_SHA: ${{ github.event.workflow_run.head_sha }}
          HEAD_BRANCH: ${{ github.event.workflow_run.head_branch || '' }}
          PR_HEAD_REF: ${{ github.event.workflow_run.pull_requests[0].head.ref || '' }}
          DISPLAY_TITLE: ${{ github.event.workflow_run.display_title || '' }}
        run: |
          set -euo pipefail
          branch="$HEAD_BRANCH"
          if [ -z "$branch" ] && [ -n "$PR_HEAD_REF" ]; then
            branch="$PR_HEAD_REF"
          fi
          if [ -z "$branch" ] && [ -n "$DISPLAY_TITLE" ]; then
            branch="$DISPLAY_TITLE"
          fi
          if [ -z "$branch" ]; then
            branch="detached"
          fi
          short_sha="${HEAD_SHA:0:7}"
          commit_subject="$(git log -1 --pretty=%s "$HEAD_SHA")"
          {
            echo "branch=$branch"
            echo "short_sha=$short_sha"
            echo "commit_subject=$commit_subject"
          } >> "$GITHUB_OUTPUT"

      - name: Update workflow run title
        shell: bash
        env:
          RUN_LABEL: Stress Test - macOS
          BRANCH: ${{ steps.run-metadata.outputs.branch }}
          SHORT_SHA: ${{ steps.run-metadata.outputs.short_sha }}
          COMMIT_SUBJECT: ${{ steps.run-metadata.outputs.commit_subject }}
        run: |
          set -euo pipefail
          title="$RUN_LABEL"
          if [ -n "$BRANCH" ]; then
            title="$title • $BRANCH"
          fi
          if [ -n "$SHORT_SHA" ]; then
            title="$title@$SHORT_SHA"
          fi
          {
            echo 'GITHUB_RUN_NAME<<EOF'
            echo "$title"
            if [ -n "$COMMIT_SUBJECT" ]; then
              echo "$COMMIT_SUBJECT"
            fi
            echo 'EOF'
          } >> "$GITHUB_ENV"

      - name: Publish run context summary
        shell: bash
        env:
          BRANCH: ${{ steps.run-metadata.outputs.branch }}
          SHORT_SHA: ${{ steps.run-metadata.outputs.short_sha }}
          COMMIT_SUBJECT: ${{ steps.run-metadata.outputs.commit_subject }}
        run: |
          set -euo pipefail
          {
            echo "## Stress test context"
            echo
            echo "- **Branch:** `$BRANCH`"
            echo "- **Commit:** `$SHORT_SHA` — $COMMIT_SUBJECT"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Determine diff base
        id: diff-base
        shell: bash
        env:
          HEAD_SHA: ${{ github.event.workflow_run.head_sha }}
          PR_BASE_SHA: ${{ github.event.workflow_run.pull_requests[0].base.sha || '' }}
        run: |
          set -euo pipefail
          if [ -n "$PR_BASE_SHA" ]; then
            base_commit="$PR_BASE_SHA"
          elif git rev-parse "${HEAD_SHA}^" >/dev/null 2>&1; then
            base_commit="$(git rev-parse "${HEAD_SHA}^")"
          else
            base_commit="$HEAD_SHA"
          fi
          echo "base=$base_commit" >> "$GITHUB_OUTPUT"

      - name: Detect changed areas
        id: changed
        uses: dorny/paths-filter@v3
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
          base: ${{ steps.diff-base.outputs.base }}
          filters: |
            core:
              - 'src/**'
              - 'include/**'
              - 'cmake/**'
              - 'CMakeLists.txt'
              - 'CMakePresets.json'
              - 'third_party/**'
            tests:
              - 'tests/**'
            examples:
              - 'example/**'
            workflows:
              - '.github/workflows/**'

      - name: Compute CMake flags
        id: flags
        shell: bash
        run: |
          CT="-DSINTRA_BUILD_TESTS=OFF -DSINTRA_TEST_MATRIX=quick"
          CE="-DSINTRA_BUILD_EXAMPLES=OFF"
          CS="-DSINTRA_RELEASE_WITH_DEBUG_SYMBOLS=ON"
          if [ "${{ steps.changed.outputs.tests }}" = "true" ] || [ "${{ steps.changed.outputs.core }}" = "true" ] || [ "${{ steps.changed.outputs.workflows }}" = "true" ]; then
            CT="-DSINTRA_BUILD_TESTS=ON -DSINTRA_TEST_MATRIX=quick"
          fi
          if [ "${{ steps.changed.outputs.examples }}" = "true" ]; then
            CE="-DSINTRA_BUILD_EXAMPLES=ON"
          fi
          echo "CMAKE_FLAGS=$CT $CE $CS" >> "$GITHUB_OUTPUT"

      - name: Verify LLDB availability
        run: |
          if ! xcrun -f lldb >/dev/null 2>&1; then
            echo "::error::lldb not available via xcrun. Install Xcode Command Line Tools to provide LLDB." >&2
            exit 1
          fi
          xcrun lldb --version

      - name: Enable debugger attachments and core dumps
        shell: bash
        run: |
          sudo /usr/sbin/DevToolsSecurity -enable
          sudo dscl . append /Groups/_developer GroupMembership "$(whoami)" || true
          sudo mkdir -p /cores
          sudo chmod 1777 /cores
          sudo launchctl limit core unlimited unlimited
          sudo sysctl kern.corefile=core.%P || true

      - name: Download build artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          name: macos-build-${{ github.event.workflow_run.head_sha }}
          path: build/
          github-token: ${{ github.token }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Make test executables executable
        shell: bash
        run: |
          if [ -d build/tests ]; then
            find build/tests -type f -exec chmod +x {} +
          fi

      - name: Run stress tests with run_tests.py
        if: steps.changed.outputs.tests == 'true' || steps.changed.outputs.core == 'true' || steps.changed.outputs.workflows == 'true'
        shell: bash
        run: |
          ulimit -c unlimited
          cd tests
          python run_tests.py --repetitions 10 --timeout 30 --build-dir ../build --config Release
