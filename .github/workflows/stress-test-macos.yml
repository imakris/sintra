name: Stress Test - macOS (reusable)

on:
  workflow_call:
    inputs:
      build_run_id:
        description: "Actions run id of the build that produced artifacts"
        required: true
        type: string
      head_sha:
        description: "Commit SHA to test (head of PR or push)"
        required: true
        type: string
      base_sha:
        description: "Base commit SHA for diff detection (PR base or push commit)"
        required: false
        type: string
      branch:
        description: "Branch name (PR head ref or push ref)"
        required: false
        type: string
      pr_number:
        description: "PR number if this came from a PR"
        required: false
        type: string
    secrets:
      repository-token:
        description: "GitHub token forwarded from the caller workflow"
        required: true

permissions:
  actions: read
  contents: read
  statuses: write

concurrency:
  group: stress-${{ inputs.head_sha }}-macos
  cancel-in-progress: false

jobs:
  stress-test:
    name: Stress Test
    runs-on: macos-15
    env:
      GITHUB_TOKEN: ${{ secrets.repository-token }}

    steps:
      - name: Set context env
        shell: bash
        run: |
          echo "RUN_ID=${{ inputs.build_run_id }}" >> "$GITHUB_ENV"
          echo "HEAD_SHA=${{ inputs.head_sha }}" >> "$GITHUB_ENV"
          echo "BASE_SHA=${{ inputs.base_sha || '' }}" >> "$GITHUB_ENV"
          echo "HEAD_BRANCH=${{ inputs.branch || '' }}" >> "$GITHUB_ENV"
          echo "PR_NUMBER=${{ inputs.pr_number || '' }}" >> "$GITHUB_ENV"

      - name: Context
        if: always()
        shell: bash
        run: |
          {
            echo "### Source";
            if [ -n "${PR_NUMBER}" ]; then
              echo "- PR: #${PR_NUMBER}";
            else
              echo "- PR: —";
            fi
            if [ -n "${HEAD_BRANCH}" ]; then
              echo "- Branch: ${HEAD_BRANCH}";
            else
              echo "- Branch: —";
            fi
            echo "- Commit: ${HEAD_SHA}";
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.HEAD_SHA }}
          fetch-depth: 0

      - name: Determine diff base
        id: diff-base
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${BASE_SHA}" ]; then
            base_commit="$BASE_SHA"
          elif git rev-parse "${HEAD_SHA}^" >/dev/null 2>&1; then
            base_commit="$(git rev-parse "${HEAD_SHA}^")"
          else
            base_commit="$HEAD_SHA"
          fi
          echo "base=$base_commit" >> "$GITHUB_OUTPUT"

      - name: Detect changed areas
        id: changed
        uses: dorny/paths-filter@v3
        with:
          ref: ${{ env.HEAD_SHA }}
          base: ${{ steps.diff-base.outputs.base }}
          filters: |
            core:
              - 'src/**'
              - 'include/**'
              - 'cmake/**'
              - 'CMakeLists.txt'
              - 'CMakePresets.json'
              - 'third_party/**'
            tests:
              - 'tests/**'
            examples:
              - 'example/**'
            workflows:
              - '.github/workflows/**'

      - name: Verify LLDB availability
        run: |
          if ! xcrun -f lldb >/dev/null 2>&1; then
            echo "::error::lldb not available via xcrun. Install Xcode Command Line Tools to provide LLDB." >&2
            exit 1
          fi
          xcrun lldb --version

      - name: Enable debugger attachments and core dumps
        shell: bash
        run: |
          sudo /usr/sbin/DevToolsSecurity -enable
          sudo dscl . append /Groups/_developer GroupMembership "$(whoami)" || true
          sudo mkdir -p /cores
          sudo chmod 1777 /cores
          sudo launchctl limit core unlimited unlimited
          sudo sysctl kern.corefile=core.%P || true

      - name: Download build artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          name: macos-build-${{ env.HEAD_SHA }}
          path: build/
          github-token: ${{ secrets.repository-token }}
          run-id: ${{ env.RUN_ID }}
      - name: Verify artifacts present
        run: |
          if [ ! -d build ]; then
            echo "Expected build artifacts were not downloaded" >&2
            exit 1
          fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Make test executables executable
        shell: bash
        run: |
          if [ -d build/tests ]; then
            find build/tests -type f -exec chmod +x {} +
          fi

      - name: Run stress tests with run_tests.py
        if: steps.changed.outputs.tests == 'true' || steps.changed.outputs.core == 'true' || steps.changed.outputs.workflows == 'true'
        shell: bash
        run: |
          ulimit -c unlimited
          cd tests
          python run_tests.py --repetitions 10 --timeout 30 --build-dir ../build --config Release

      - name: Mark status success
        if: success()
        uses: actions/github-script@v8
        with:
          script: |
            const {owner, repo} = context.repo;
            const sha = process.env.HEAD_SHA;
            const branch = process.env.HEAD_BRANCH;
            const prNumber = process.env.PR_NUMBER;
            const statusContext = 'Stress Test';
            await github.rest.repos.createCommitStatus({
              owner, repo, sha,
              state: 'success',
              context: statusContext,
              target_url: `${context.serverUrl}/${owner}/${repo}/actions/runs/${process.env.GITHUB_RUN_ID}`,
              description: `Stress Test passed${branch ? ` on ${branch}` : ''}${prNumber ? ` (PR #${prNumber})` : ''}`
            });

      - name: Mark status failure
        if: failure()
        uses: actions/github-script@v8
        with:
          script: |
            const {owner, repo} = context.repo;
            const sha = process.env.HEAD_SHA;
            const branch = process.env.HEAD_BRANCH;
            const prNumber = process.env.PR_NUMBER;
            const statusContext = 'Stress Test';
            await github.rest.repos.createCommitStatus({
              owner, repo, sha,
              state: 'failure',
              context: statusContext,
              target_url: `${context.serverUrl}/${owner}/${repo}/actions/runs/${process.env.GITHUB_RUN_ID}`,
              description: `Stress Test failed${branch ? ` on ${branch}` : ''}${prNumber ? ` (PR #${prNumber})` : ''}`
            });
