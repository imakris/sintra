name: Stress Test - macOS
run-name: Stress Test - ${{ github.event.workflow_run.display_title }}

on:
  workflow_run:
    workflows: ["Build - macOS"]
    types:
      - completed

permissions:
  actions: read
  contents: read

jobs:
  stress-test:
    name: Stress Test
    runs-on: macos-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
          fetch-depth: 0

      - name: Select Xcode toolchain with sys/ulock.h
        id: macos-sdk
        run: |
          set -euo pipefail

          if ! command -v xcode-select >/dev/null; then
            echo "::error::xcode-select not available" >&2
            exit 1
          fi

          selected=""
          sdkroot=""
          found_any=0
          declare -a candidate_dirs=()

          current_dir="$(xcode-select -p 2>/dev/null || true)"
          if [ -n "$current_dir" ]; then
            candidate_dirs+=("$current_dir")
          fi

          if [ -d /Applications ]; then
            while IFS= read -r app; do
              developer_dir="$app/Contents/Developer"
              if [ -d "$developer_dir" ]; then
                candidate_dirs+=("$developer_dir")
              fi
            done < <(find /Applications -maxdepth 1 -type d -name 'Xcode*.app' -print | sort -r)
          fi

          if [ -d /Library/Developer/CommandLineTools ]; then
            candidate_dirs+=("/Library/Developer/CommandLineTools")
          fi

          if [ ${#candidate_dirs[@]} -eq 0 ]; then
            echo "::error::No candidate developer directories found" >&2
            exit 1
          fi

          while IFS= read -r developer_dir; do
            found_any=1
            if SDKROOT="$(DEVELOPER_DIR="$developer_dir" xcrun --sdk macosx --show-sdk-path 2>/dev/null)"; then
              if [ -f "$SDKROOT/usr/include/sys/ulock.h" ]; then
                selected="$developer_dir"
                sdkroot="$SDKROOT"
                break
              else
                echo "Skipping $developer_dir: sys/ulock.h not found in $SDKROOT" >&2
              fi
            else
              echo "Skipping $developer_dir: unable to determine macOS SDK" >&2
            fi
          done < <(printf '%s\n' "${candidate_dirs[@]}" | awk '!seen[$0]++')

          if [ "$found_any" -eq 0 ]; then
            echo "::error::No developer directories evaluated" >&2
            exit 1
          fi

          if [ -z "$selected" ] || [ -z "$sdkroot" ]; then
            echo "::error::None of the installed Xcode toolchains provide sys/ulock.h" >&2
            exit 1
          fi

          echo "Selecting $selected"
          if [ "$(xcode-select -p 2>/dev/null || true)" != "$selected" ]; then
            sudo xcode-select --switch "$selected"
          fi
          xcode-select -p
          echo "Found sys/ulock.h in $sdkroot"

          echo "developer_dir=$selected" >> "$GITHUB_OUTPUT"
          echo "sdkroot=$sdkroot" >> "$GITHUB_OUTPUT"

      - name: Export developer dir
        if: ${{ steps.macos-sdk.outputs.developer_dir != '' }}
        run: echo "DEVELOPER_DIR=${{ steps.macos-sdk.outputs.developer_dir }}" >> "$GITHUB_ENV"

      - name: Determine diff base
        id: diff-base
        shell: bash
        env:
          HEAD_SHA: ${{ github.event.workflow_run.head_sha }}
          PR_BASE_SHA: ${{ github.event.workflow_run.pull_requests[0].base.sha || '' }}
        run: |
          set -euo pipefail
          if [ -n "$PR_BASE_SHA" ]; then
            base_commit="$PR_BASE_SHA"
          elif git rev-parse "${HEAD_SHA}^" >/dev/null 2>&1; then
            base_commit="$(git rev-parse "${HEAD_SHA}^")"
          else
            base_commit="$HEAD_SHA"
          fi
          echo "base=$base_commit" >> "$GITHUB_OUTPUT"

      - name: Detect changed areas
        id: changed
        uses: dorny/paths-filter@v3
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
          base: ${{ steps.diff-base.outputs.base }}
          filters: |
            core:
              - 'src/**'
              - 'include/**'
              - 'cmake/**'
              - 'CMakeLists.txt'
              - 'CMakePresets.json'
              - 'third_party/**'
            tests:
              - 'tests/**'
            examples:
              - 'example/**'
            workflows:
              - '.github/workflows/**'

      - name: Compute CMake flags
        id: flags
        shell: bash
        run: |
          CT="-DSINTRA_BUILD_TESTS=OFF -DSINTRA_TEST_MATRIX=quick"
          CE="-DSINTRA_BUILD_EXAMPLES=OFF"
          CS="-DSINTRA_RELEASE_WITH_DEBUG_SYMBOLS=ON"
          if [ "${{ steps.changed.outputs.tests }}" = "true" ] || [ "${{ steps.changed.outputs.core }}" = "true" ] || [ "${{ steps.changed.outputs.workflows }}" = "true" ]; then
            CT="-DSINTRA_BUILD_TESTS=ON -DSINTRA_TEST_MATRIX=quick"
          fi
          if [ "${{ steps.changed.outputs.examples }}" = "true" ]; then
            CE="-DSINTRA_BUILD_EXAMPLES=ON"
          fi
          echo "CMAKE_FLAGS=$CT $CE $CS" >> "$GITHUB_OUTPUT"

      - name: Verify LLDB availability
        env:
          DEVELOPER_DIR: ${{ steps.macos-sdk.outputs.developer_dir }}
        run: |
          if ! xcrun -f lldb >/dev/null 2>&1; then
            echo "::error::lldb not available via xcrun. Install Xcode Command Line Tools to provide LLDB." >&2
            exit 1
          fi
          xcrun lldb --version

      - name: Enable debugger attachments and core dumps
        shell: bash
        run: |
          sudo /usr/sbin/DevToolsSecurity -enable
          sudo dscl . append /Groups/_developer GroupMembership "$(whoami)" || true
          sudo mkdir -p /cores
          sudo chmod 1777 /cores
          sudo launchctl limit core unlimited unlimited
          sudo sysctl kern.corefile=core.%P || true

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-build-${{ github.event.workflow_run.head_sha }}
          path: build/
          github-token: ${{ github.token }}
          run-id: ${{ github.event.workflow_run.id }}
          if-no-artifact-found: error

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Make test executables executable
        shell: bash
        run: |
          if [ -d build/tests ]; then
            find build/tests -type f -exec chmod +x {} +
          fi

      - name: Run stress tests with run_tests.py
        if: steps.changed.outputs.tests == 'true' || steps.changed.outputs.core == 'true' || steps.changed.outputs.workflows == 'true'
        shell: bash
        run: |
          ulimit -c unlimited
          cd tests
          python run_tests.py --repetitions 10 --timeout 30 --build-dir ../build --config Release
