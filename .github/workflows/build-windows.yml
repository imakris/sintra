name: Build - Windows

on:
  push:
    branches: [ '*' ]
    paths:
      - 'src/**'
      - 'include/**'
      - 'cmake/**'
      - 'CMakeLists.txt'
      - 'CMakePresets.json'
      - 'third_party/**'
      - 'tests/**'
      - 'example/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ '*' ]
    paths:
      - 'src/**'
      - 'include/**'
      - 'cmake/**'
      - 'CMakeLists.txt'
      - 'CMakePresets.json'
      - 'third_party/**'
      - 'tests/**'
      - 'example/**'
      - '.github/workflows/**'

jobs:
  build:
    name: Build
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed areas
        id: changed
        uses: dorny/paths-filter@v3
        with:
          filters: |
            core:
              - 'src/**'
              - 'include/**'
              - 'cmake/**'
              - 'CMakeLists.txt'
              - 'CMakePresets.json'
              - 'third_party/**'
            tests:
              - 'tests/**'
            examples:
              - 'example/**'
            workflows:
              - '.github/workflows/**'

      - name: Compute CMake flags
        id: flags
        shell: bash
        run: |
          CT="-DSINTRA_BUILD_TESTS=OFF -DSINTRA_TEST_MATRIX=quick"
          CE="-DSINTRA_BUILD_EXAMPLES=OFF"
          if [ "${{ steps.changed.outputs.tests }}" = "true" ] || [ "${{ steps.changed.outputs.core }}" = "true" ] || [ "${{ steps.changed.outputs.workflows }}" = "true" ]; then
            CT="-DSINTRA_BUILD_TESTS=ON -DSINTRA_TEST_MATRIX=quick"
          fi
          if [ "${{ steps.changed.outputs.examples }}" = "true" ]; then
            CE="-DSINTRA_BUILD_EXAMPLES=ON"
          fi
          echo "CMAKE_FLAGS=$CT $CE" >> "$GITHUB_OUTPUT"

      - name: Ensure Windows debugging tools
        shell: pwsh
        run: |
          function Get-WindowsDebuggerDirectories {
            @(
              "${env:ProgramFiles(x86)}\Windows Kits\10\Debuggers\x64",
              "${env:ProgramFiles(x86)}\Windows Kits\10\Debuggers\x86"
            ) | Where-Object { $_ -and (Test-Path $_) }
          }

          $debugDirs = Get-WindowsDebuggerDirectories
          if ($debugDirs) {
            Write-Host 'Windows debugging tools already available. Skipping Chocolatey installation.'
          } else {
            $packageParameters = "'ADDLOCAL=DebuggingTools'"
            $packages = @(
              'windows-sdk-10-version-10.0.26100.1',
              'windows-sdk-10-version-10.0.22621.0',
              'windows-sdk-10-version-10.0.22000.832',
              'windows-sdk-10-version-2004-all',
              'windows-sdk-10'
            )
            $installed = $false
            foreach ($package in $packages) {
              Write-Host "Attempting to install $package via Chocolatey"
              choco install $package --no-progress -y --package-parameters=$packageParameters
              if ($LASTEXITCODE -eq 0) {
                $installed = $true
                break
              }
              Write-Warning "Failed to install $package (exit code $LASTEXITCODE)."
              $global:LASTEXITCODE = 0
            }
            if (-not $installed) {
              Write-Warning 'Unable to install the Windows SDK via Chocolatey. Proceeding with any pre-installed debugging tools.'
            }
            $debugDirs = Get-WindowsDebuggerDirectories
          }

          if (-not $debugDirs) {
            Write-Warning 'Windows debugging tools directory not found. Crash dump collection will be skipped.'
          } else {
            foreach ($dir in $debugDirs) {
              Add-Content -Path $env:GITHUB_PATH -Value $dir
            }
          }

      - name: Verify Windows debuggers
        shell: pwsh
        run: |
          $candidates = @('cdb', 'ntsd', 'windbg')
          $found = @()
          foreach ($candidate in $candidates) {
            $command = Get-Command $candidate -ErrorAction SilentlyContinue
            if ($command) {
              $paths = @($command | ForEach-Object {
                  if ($_.Source) { $_.Source } else { $_.Definition }
                }) | Where-Object { $_ }
              if (-not $paths) {
                $paths = @('<unknown path>')
              }
              Write-Host "$candidate -> $($paths -join ', ')"
              $found += $candidate
            } else {
              Write-Warning "Unable to locate $candidate"
            }
            $global:LASTEXITCODE = 0
          }
          if (-not $found) {
            Write-Warning "No Windows debugger discovered. Checked: $($candidates -join ', ')"
            Add-Content -Path $env:GITHUB_ENV -Value 'SINTRA_WINDOWS_DEBUGGER_AVAILABLE=false'
          } else {
            Add-Content -Path $env:GITHUB_ENV -Value 'SINTRA_WINDOWS_DEBUGGER_AVAILABLE=true'
          }

      - name: Configure CMake
        run: cmake -B build -S . -DCMAKE_BUILD_TYPE=Release ${{ steps.flags.outputs.CMAKE_FLAGS }}

      - name: Build
        run: cmake --build build --config Release

      - name: Run tests
        if: steps.changed.outputs.tests == 'true' || steps.changed.outputs.core == 'true' || steps.changed.outputs.workflows == 'true'
        run: ctest --test-dir build -C Release --output-on-failure --timeout 60

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-${{ github.event.pull_request.head.sha || github.sha }}
          path: build/
          retention-days: 1
